#pragma once
#include <string>
#include <vector>

class {{ table.name }}Buf {
public:
private:
    std::vector<uint8_t> buffer; 
    {% for field in table.fields %}
    {{ field.type }} {{ field.name }};
    {% endfor %}

    {{ table.name }}() = default;

    std::vector<uint8_t> ToFlatBuffer() const {
        // TODO: implement serialization using FlatBuffers
        return {};
    }

    static {{ table.name }} FromFlatBuffer(const uint8_t* buffer, size_t size) {
        {{ table.name }} obj;
        // TODO: implement deserialization using FlatBuffers
        return obj;
    }
};