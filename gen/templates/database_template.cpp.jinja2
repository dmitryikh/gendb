// AUTO GENERATED. DO NOT EDIT.
//
#include "database.h"

#include <cstdint>
{% for include in includes %}
#include "{{ include }}"
{% endfor %}
#include "absl/status/status.h"
#include "gendb/status.h"

namespace {{ namespace }} {

Guard Db::SharedLock() const {
  return {*this, std::shared_lock<std::shared_mutex>(_reader_mutex)};
}

ScopedWrite Db::CreateWriter() {
  return {*this, std::unique_lock<std::mutex>(_writer_mutex)};
}

{% for coll in collections %}
absl::Status Guard::Get{{ coll.type }}({{ coll.primary_key_type }} {{ coll.primary_key_name }}, {{ coll.type }}& {{ coll.type_snake_case }}) const {
  BytesConstView value;
  RETURN_IF_ERROR(_layered_storage.Get({{ coll.enum_name }}, To{{ coll.type }}Key({{ coll.primary_key_name }}), value));
  {{ coll.type_snake_case }} = {{ coll.type }}{value};
  return absl::OkStatus();
}

absl::Status ScopedWrite::Get{{ coll.type }}({{ coll.primary_key_type }} {{ coll.primary_key_name }}, {{ coll.type }}& {{ coll.type_snake_case }}) const {
  BytesConstView value;
  RETURN_IF_ERROR(_layered_storage.Get({{ coll.enum_name }}, To{{ coll.type }}Key({{ coll.primary_key_name }}), value));
  {{ coll.type_snake_case }} = {{ coll.type }}{value};
  return absl::OkStatus();
}

absl::Status ScopedWrite::Put{{ coll.type }}({{ coll.primary_key_type }} {{ coll.primary_key_name }}, std::vector<uint8_t> obj) {
  _temp_storage.Put({{ coll.enum_name }}, To{{ coll.type }}Key({{ coll.primary_key_name }}), std::move(obj));
  return absl::OkStatus();
}

absl::Status ScopedWrite::Update{{ coll.type }}({{ coll.primary_key_type }} {{ coll.primary_key_name }}, const MessagePatch& update) {
  Bytes* ptr = nullptr;
  RETURN_IF_ERROR(_layered_storage.EnsureInTempStorage({{ coll.enum_name }}, To{{ coll.type }}Key({{ coll.primary_key_name }}), &ptr));
  gendb::ApplyPatch<{{ coll.type }}>(update, *ptr);
  return absl::OkStatus();
}
{% endfor %}

void ScopedWrite::Commit() {
  std::unique_lock lock(_db._reader_mutex);
  _layered_storage.MergeTempStorage();
}

}  // namespace {{ namespace }}
