// AUTO GENERATED. DO NOT EDIT.
//
#pragma once
#include <cstdint>
#include <array>
#include <string_view>

#include "gendb/message_base.h"
#include "gendb/message_builder.h"
#include "gendb/bits.h"
#include "gendb/message_patch.h"

{% if table.namespace %}namespace {{ table.namespace }} {
{% endif %}
// GeneratedClass
class {{ table.class_name }} : private gendb::MessageBase {
 public:

  enum Field : int {
    {% for field in fields %}
    {{ field.enum_name }} = {{ loop.index }},
    {% endfor %}
    MaxFields
  };

  static constexpr std::array<uint32_t, {{ table.K }}> kFixedSizeFields = gendb::MakeConstexprFieldBitmask<{{ table.K }}>({
    {% for field in table.fixed_fields %}
      {{ field.enum_name }},
    {% endfor %}
  });

  {{ table.class_name }}() = default;
  {{ table.class_name }}(std::span<const uint8_t> span) : MessageBase(span) {}

  {% for field in fields %}
  bool has_{{ field.name }}() const { return HasField({{ field.enum_name }}); }
  {% if field.cpp_type == 'std::string' %}
  std::string_view {{ field.name }}() const { return ReadStringField({{ field.enum_name }}, ""); }
  {% else %}
  {{ field.cpp_type }} {{ field.name }}() const { return ReadScalarField<{{ field.cpp_type }}>({{ field.enum_name }}, {{ field.default }}); }
  {% endif %}
  {% endfor %}


  // MessageBase methods.
  using gendb::MessageBase::FieldCount;
  using gendb::MessageBase::HasField;
  using gendb::MessageBase::GetFieldsMask;
  std::span<const uint8_t> FieldRaw(int field_id) const {
    return gendb::MessageBase::FieldRaw(field_id);
  }

  friend class {{ table.class_name }}Builder;
};

class {{ table.class_name }}Builder : public gendb::MessageBuilder {
 public:
  {{ table.class_name }}Builder() : MessageBuilder() {}
  {{ table.class_name }}Builder({{ table.class_name }}& obj) : MessageBuilder(obj) {}

  {% for field in fields %}
  {% if field.cpp_type == 'std::string' %}
  void set_{{ field.name }}(std::string_view value) { AddStringField({{ table.class_name }}::{{ field.enum_name }}, value); }
  {% else %}
  void set_{{ field.name }}({{ field.const_ref_type }} value) { AddField<{{ field.cpp_type }}>({{ table.class_name }}::{{ field.enum_name }}, value); }
  {% endif %}
  {% endfor %}

  {% for field in fields %}
  void clear_{{ field.name }}() { ClearField({{ table.class_name }}::{{ field.enum_name }}); }
  {% endfor %}

  std::vector<uint8_t> Build() { return MessageBuilder::Build(); }
};

class {{ table.class_name }}PatchBuilder {
 public:
  {{ table.class_name }}PatchBuilder() = default;
  // TODO: Add constructor with primary key fields.

  {% for field in fields %}
  {{ table.class_name }}PatchBuilder&& set_{{ field.name }}({{ field.const_ref_type }} value) && {
    _builder.set_{{ field.name }}(value);
    SetFieldBit(modified, {{ table.class_name }}::{{ field.enum_name }});
    UnsetFieldBit(removed, {{ table.class_name }}::{{ field.enum_name }});
    return std::move(*this);
  }
  {{ table.class_name }}PatchBuilder&& clear_{{ field.name }}() && {
    SetFieldBit(removed, {{ table.class_name }}::{{ field.enum_name }});
    UnsetFieldBit(modified, {{ table.class_name }}::{{ field.enum_name }});
    _builder.clear_{{ field.name }}();
    return std::move(*this);
  }
  {% endfor %}

  gendb::MessagePatch BuildPatch() && {
    gendb::MessagePatch patch;
    patch.modified = std::move(modified);
    patch.removed = std::move(removed);
    patch.buffer = _builder.Build();
    return patch;
  }

 private:
  gendb::Bitmask modified;
  gendb::Bitmask removed;
  {{ table.class_name }}Builder _builder;
};
{% if table.namespace %}
} // namespace {{ table.namespace }}
{% endif %}
